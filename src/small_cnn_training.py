# -*- coding: utf-8 -*-
"""Graph_Neural_Networks_For_Multi_Agent_Path_Planning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDiApiVBIaHaxwBYU5hNtkHWUtUaHfw9

# Graph Neural Networks For Multi-agent Path Planning

## 1. Data
"""

!pip -q install numpy pyyaml download tensorflow
!git clone https://github.com/Oelin/distributed-cbs-dataset

from typing import Tuple
import gzip
import numpy as np


def load_tensor(filename: str, shape: Tuple = tuple(), type: str = 'u1') -> np.array:
    
    with gzip.GzipFile(filename) as file:
        tensor_bytes = file.read()
    
    return np.array(list(tensor_bytes)).reshape((-1, *shape))

print('[*] Loadng first chunk...')

labels_train_0 = load_tensor('./distributed-cbs-dataset/v0/labels/labels0.gz')
inputs_train_0 = load_tensor('./distributed-cbs-dataset/v0/inputs/inputs0.gz', shape=(7, 7, 3))
labels_validation_0 = load_tensor('./distributed-cbs-dataset/v1/labels/labels0.gz')
inputs_validation_0 = load_tensor('./distributed-cbs-dataset/v1/inputs/inputs0.gz', shape=(7, 7, 3))

print('[*] Loadng second chunk...')

labels_train_1 = load_tensor('./distributed-cbs-dataset/v0/labels/labels1.gz')
inputs_train_1 = load_tensor('./distributed-cbs-dataset/v0/inputs/inputs1.gz', shape=(7, 7, 3))
labels_validation_1 = load_tensor('./distributed-cbs-dataset/v1/labels/labels1.gz')
inputs_validation_1 = load_tensor('./distributed-cbs-dataset/v1/inputs/inputs1.gz', shape=(7, 7, 3))

import numpy as np

def one_hot_encode(x, num_classes: int = 2):

    encoding = np.zeros((num_classes, ))
    encoding[x] = 1

    return encoding

x_train = inputs_train_0
y_train = np.array([one_hot_encode(label, num_classes = 5) for label in labels_train_0])
x_validation = inputs_validation_0
y_validation = np.array([one_hot_encode(label, num_classes = 5) for label in labels_validation_0])

x_train.shape, y_train.shape

"""## 2. Training"""

import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras.layers import Dense, Conv2D, Flatten
from tensorflow.keras.models import Sequential


model = Sequential()

model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=x_train[0].shape))
model.add(Conv2D(32, kernel_size=3, activation='relu', ))
model.add(Flatten())
model.add(Dense(5, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, validation_data=(x_validation, y_validation), epochs=10)

model.save('./cnn-small.h5', save_format='h5')

model.save()
